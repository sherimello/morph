{
  "sksl": {
    "entrypoint": "liquid_glass_arbitrary_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform float uSizeW;\nuniform float uSizeH;\nuniform float uForegroundSizeW;\nuniform float uForegroundSizeH;\nuniform float uChromaticAberration = 0.0;\nuniform float uGlassColorR;\nuniform float uGlassColorG;\nuniform float uGlassColorB;\nuniform float uGlassColorA;\nuniform float uLightAngle;\nuniform float uLightIntensity;\nuniform float uAmbientStrength;\nuniform float uThickness;\nuniform float uRefractiveIndex;\nuniform float uOffsetX;\nuniform float uOffsetY;\nuniform float uNormalMethod;\nuniform float uGaussianBlur;\nuniform shader uBackgroundTexture;\nuniform half2 uBackgroundTexture_size;\nuniform shader uForegroundTexture;\nuniform half2 uForegroundTexture_size;\nuniform shader uForegroundBlurredTexture;\nuniform half2 uForegroundBlurredTexture_size;\n\nvec4 fragColor;\n\nvec2 uSize;\nvec2 uForegroundSize;\nvec4 uGlassColor;\nvec2 uOffset;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_approximateSDF(float blurredAlpha, float thickness)\n{\n    float normalizedDistance = smoothstep(0.0, 1.0, blurredAlpha);\n    return (-normalizedDistance) * thickness;\n}\n\nvec2 FLT_flutter_local_findShapeCenter(vec2 currentUV)\n{\n    vec2 texelSize = vec2(2.0) / uForegroundSize;\n    vec2 centerSum = vec2(0.0);\n    float totalAlpha = 0.0;\n    int sampleRadius = 10;\n    int _948 = -sampleRadius;\n    for (int y = _948; y <= sampleRadius; y++)\n    {\n        int _959 = -sampleRadius;\n        for (int x = _959; x <= sampleRadius; x++)\n        {\n            vec2 sampleUV = currentUV + (vec2(float(x), float(y)) * texelSize);\n            bool _980 = sampleUV.x >= 0.0;\n            bool _986;\n            if (_980)\n            {\n                _986 = sampleUV.x <= 1.0;\n            }\n            else\n            {\n                _986 = _980;\n            }\n            bool _992;\n            if (_986)\n            {\n                _992 = sampleUV.y >= 0.0;\n            }\n            else\n            {\n                _992 = _986;\n            }\n            bool _998;\n            if (_992)\n            {\n                _998 = sampleUV.y <= 1.0;\n            }\n            else\n            {\n                _998 = _992;\n            }\n            if (_998)\n            {\n                float alpha = uForegroundTexture.eval(uForegroundTexture_size * ( sampleUV)).w;\n                if (alpha > 0.100000001490116119384765625)\n                {\n                    centerSum += (sampleUV * alpha);\n                    totalAlpha += alpha;\n                }\n            }\n        }\n    }\n    vec2 _1026;\n    if (totalAlpha > 0.0)\n    {\n        _1026 = centerSum / vec2(totalAlpha);\n    }\n    else\n    {\n        _1026 = currentUV;\n    }\n    return _1026;\n}\n\nvec3 FLT_flutter_local_getReconstructedNormal(vec2 p, float thickness)\n{\n    vec2 uv = p / uForegroundSize;\n    if (uForegroundTexture.eval(uForegroundTexture_size * ( uv)).w < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0, 0.0, 1.0);\n    }\n    vec2 param = uv;\n    vec2 shapeCenter = FLT_flutter_local_findShapeCenter(param);\n    vec2 centerToPoint = uv - shapeCenter;\n    if (length(centerToPoint) < 0.001000000047497451305389404296875)\n    {\n        return vec3(0.0, 0.0, 1.0);\n    }\n    vec2 outwardDirection = normalize(centerToPoint);\n    float blurredAlpha = uForegroundBlurredTexture.eval(uForegroundBlurredTexture_size * ( uv)).w;\n    float sharpAlpha = uForegroundTexture.eval(uForegroundTexture_size * ( uv)).w;\n    float edgeDistance = smoothstep(0.0, 1.0, blurredAlpha);\n    float normalExponent = 0.20000000298023223876953125;\n    float normalZ = pow(edgeDistance, normalExponent);\n    float xyScale = sqrt(max(0.0, 1.0 - (normalZ * normalZ)));\n    return normalize(vec3(outwardDirection * xyScale, normalZ));\n}\n\nvec3 FLT_flutter_local_getNormal(vec2 p, float thickness)\n{\n    vec2 param = p;\n    float param_1 = thickness;\n    return FLT_flutter_local_getReconstructedNormal(param, param_1);\n}\n\nfloat FLT_flutter_local_getHeight(float sd, float thickness)\n{\n    if ((sd >= 0.0) || (thickness <= 0.0))\n    {\n        return 0.0;\n    }\n    if (sd < (-thickness))\n    {\n        return thickness;\n    }\n    float x = thickness + sd;\n    return sqrt(max(0.0, (thickness * thickness) - (x * x)));\n}\n\nvec4 FLT_flutter_local_applyKawaseBlur(shader tex, vec2 uv, vec2 texelSize, float blurRadius)\n{\n    if (blurRadius < 0.001000000047497451305389404296875)\n    {\n        return tex.eval(tex_size * ( uv));\n    }\n    vec4 color = vec4(0.0);\n    float totalWeight = 0.0;\n    float offset = blurRadius;\n    vec2 offsets1[4] = vec2[](vec2(-offset, -offset), vec2(offset, -offset), vec2(-offset, offset), vec2(offset));\n    for (int i = 0; i < 4; i++)\n    {\n        vec2 sampleUV = uv + (offsets1[i] * texelSize);\n        bool _196 = sampleUV.x >= 0.0;\n        bool _203;\n        if (_196)\n        {\n            _203 = sampleUV.x <= 1.0;\n        }\n        else\n        {\n            _203 = _196;\n        }\n        bool _210;\n        if (_203)\n        {\n            _210 = sampleUV.y >= 0.0;\n        }\n        else\n        {\n            _210 = _203;\n        }\n        bool _216;\n        if (_210)\n        {\n            _216 = sampleUV.y <= 1.0;\n        }\n        else\n        {\n            _216 = _210;\n        }\n        if (_216)\n        {\n            color += tex.eval(tex_size * ( sampleUV));\n            totalWeight += 1.0;\n        }\n    }\n    float offset2 = offset * 1.5;\n    vec2 offsets2[4] = vec2[](vec2(0.0, -offset2), vec2(0.0, offset2), vec2(-offset2, 0.0), vec2(offset2, 0.0));\n    for (int i_1 = 0; i_1 < 4; i_1++)\n    {\n        vec2 sampleUV_1 = uv + (offsets2[i_1] * texelSize);\n        bool _263 = sampleUV_1.x >= 0.0;\n        bool _269;\n        if (_263)\n        {\n            _269 = sampleUV_1.x <= 1.0;\n        }\n        else\n        {\n            _269 = _263;\n        }\n        bool _275;\n        if (_269)\n        {\n            _275 = sampleUV_1.y >= 0.0;\n        }\n        else\n        {\n            _275 = _269;\n        }\n        bool _281;\n        if (_275)\n        {\n            _281 = sampleUV_1.y <= 1.0;\n        }\n        else\n        {\n            _281 = _275;\n        }\n        if (_281)\n        {\n            color += (tex.eval(tex_size * ( sampleUV_1)) * 0.800000011920928955078125);\n            totalWeight += 0.800000011920928955078125;\n        }\n    }\n    float offset3 = offset * 0.699999988079071044921875;\n    vec2 offsets3[4] = vec2[](vec2(-offset3, 0.0), vec2(offset3, 0.0), vec2(0.0, -offset3), vec2(0.0, offset3));\n    for (int i_2 = 0; i_2 < 4; i_2++)\n    {\n        vec2 sampleUV_2 = uv + (offsets3[i_2] * texelSize);\n        bool _329 = sampleUV_2.x >= 0.0;\n        bool _335;\n        if (_329)\n        {\n            _335 = sampleUV_2.x <= 1.0;\n        }\n        else\n        {\n            _335 = _329;\n        }\n        bool _341;\n        if (_335)\n        {\n            _341 = sampleUV_2.y >= 0.0;\n        }\n        else\n        {\n            _341 = _335;\n        }\n        bool _347;\n        if (_341)\n        {\n            _347 = sampleUV_2.y <= 1.0;\n        }\n        else\n        {\n            _347 = _341;\n        }\n        if (_347)\n        {\n            color += (tex.eval(tex_size * ( sampleUV_2)) * 0.60000002384185791015625);\n            totalWeight += 0.60000002384185791015625;\n        }\n    }\n    color += (tex.eval(tex_size * ( uv)) * 2.0);\n    totalWeight += 2.0;\n    vec4 _372;\n    if (totalWeight > 0.0)\n    {\n        _372 = color / vec4(totalWeight);\n    }\n    else\n    {\n        _372 = tex.eval(tex_size * ( uv));\n    }\n    return _372;\n}\n\nvec4 FLT_flutter_local_calculateRefraction(vec2 screenUV, vec3 normal, float height, float thickness, float refractiveIndex, float chromaticAberration, vec2 uSize_1, shader backgroundTexture, float blurRadius, inout vec2 refractionDisplacement)\n{\n    float baseHeight = thickness * 8.0;\n    vec3 incident = vec3(0.0, 0.0, -1.0);\n    vec2 texelSize = vec2(1.0) / uSize_1;\n    vec4 refractColor;\n    if (chromaticAberration > 0.001000000047497451305389404296875)\n    {\n        float iorR = refractiveIndex - (chromaticAberration * 0.039999999105930328369140625);\n        float iorG = refractiveIndex;\n        float iorB = refractiveIndex + (chromaticAberration * 0.07999999821186065673828125);\n        vec3 refractVecR = refract(incident, normal, 1.0 / iorR);\n        float refractLengthR = (height + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVecR.z));\n        vec2 refractedUVR = screenUV + ((refractVecR.xy * refractLengthR) / uSize_1);\n        float _602;\n        if (blurRadius > 0.001000000047497451305389404296875)\n        {\n            vec2 param = refractedUVR;\n            vec2 param_1 = texelSize;\n            float param_2 = blurRadius;\n            _602 = FLT_flutter_local_applyKawaseBlur(backgroundTexture, param, param_1, param_2).x;\n        }\n        else\n        {\n            _602 = backgroundTexture.eval(backgroundTexture_size * ( refractedUVR)).x;\n        }\n        float red = _602;\n        vec3 refractVecG = refract(incident, normal, 1.0 / iorG);\n        float refractLengthG = (height + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVecG.z));\n        refractionDisplacement = refractVecG.xy * refractLengthG;\n        vec2 refractedUVG = screenUV + (refractionDisplacement / uSize_1);\n        vec4 _647;\n        if (blurRadius > 0.001000000047497451305389404296875)\n        {\n            vec2 param_3 = refractedUVG;\n            vec2 param_4 = texelSize;\n            float param_5 = blurRadius;\n            _647 = FLT_flutter_local_applyKawaseBlur(backgroundTexture, param_3, param_4, param_5);\n        }\n        else\n        {\n            _647 = backgroundTexture.eval(backgroundTexture_size * ( refractedUVG));\n        }\n        vec4 greenSample = _647;\n        float green = greenSample.y;\n        float bgAlpha = greenSample.w;\n        vec3 refractVecB = refract(incident, normal, 1.0 / iorB);\n        float refractLengthB = (height + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVecB.z));\n        vec2 refractedUVB = screenUV + ((refractVecB.xy * refractLengthB) / uSize_1);\n        float _696;\n        if (blurRadius > 0.001000000047497451305389404296875)\n        {\n            vec2 param_6 = refractedUVB;\n            vec2 param_7 = texelSize;\n            float param_8 = blurRadius;\n            _696 = FLT_flutter_local_applyKawaseBlur(backgroundTexture, param_6, param_7, param_8).z;\n        }\n        else\n        {\n            _696 = backgroundTexture.eval(backgroundTexture_size * ( refractedUVB)).z;\n        }\n        float blue = _696;\n        refractColor = vec4(red, green, blue, bgAlpha);\n    }\n    else\n    {\n        vec3 refractVec = refract(incident, normal, 1.0 / refractiveIndex);\n        float refractLength = (height + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVec.z));\n        refractionDisplacement = refractVec.xy * refractLength;\n        vec2 refractedUV = screenUV + (refractionDisplacement / uSize_1);\n        vec4 _747;\n        if (blurRadius > 0.001000000047497451305389404296875)\n        {\n            vec2 param_9 = refractedUV;\n            vec2 param_10 = texelSize;\n            float param_11 = blurRadius;\n            _747 = FLT_flutter_local_applyKawaseBlur(backgroundTexture, param_9, param_10, param_11);\n        }\n        else\n        {\n            _747 = backgroundTexture.eval(backgroundTexture_size * ( refractedUV));\n        }\n        refractColor = _747;\n    }\n    return refractColor;\n}\n\nvec3 FLT_flutter_local_calculateLighting(vec2 uv, vec3 normal, float height, vec2 refractionDisplacement, float thickness, float lightAngle, float lightIntensity, float ambientStrength)\n{\n    float _420;\n    if (thickness > 0.0)\n    {\n        _420 = height / thickness;\n    }\n    else\n    {\n        _420 = 0.0;\n    }\n    float normalizedHeight = _420;\n    float shape = smoothstep(0.0, 0.89999997615814208984375, 1.0 - normalizedHeight);\n    if (shape < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0);\n    }\n    vec3 viewDir = vec3(0.0, 0.0, 1.0);\n    float fresnel = pow(1.0 - max(0.0, dot(normal, viewDir)), 3.0);\n    vec3 rimLight = vec3((fresnel * ambientStrength) * 0.5);\n    vec3 lightDir = normalize(vec3(cos(lightAngle), sin(lightAngle), -0.699999988079071044921875));\n    vec3 oppositeLightDir = normalize(vec3(-lightDir.xy, lightDir.z));\n    vec3 halfwayDir1 = normalize(lightDir + viewDir);\n    float specDot1 = max(0.0, dot(normal, halfwayDir1));\n    vec3 halfwayDir2 = normalize(oppositeLightDir + viewDir);\n    float specDot2 = max(0.0, dot(normal, halfwayDir2));\n    float glintExponent = mix(120.0, 200.0, smoothstep(5.0, 25.0, thickness));\n    float sharpFactor = pow(specDot1, glintExponent) + (0.4000000059604644775390625 * pow(specDot2, glintExponent));\n    vec3 sharpGlint = (vec3(sharpFactor) * lightIntensity) * 2.5;\n    float softFactor = pow(specDot1, 20.0) + (0.5 * pow(specDot2, 20.0));\n    vec3 softBleed = (vec3(softFactor) * lightIntensity) * 0.4000000059604644775390625;\n    vec3 lighting = (rimLight + sharpGlint) + softBleed;\n    return lighting * shape;\n}\n\nvec4 FLT_flutter_local_applyGlassColor(vec4 liquidColor, vec4 glassColor)\n{\n    vec4 finalColor = liquidColor;\n    if (glassColor.w > 0.0)\n    {\n        float glassLuminance = dot(glassColor.xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n        if (glassLuminance < 0.5)\n        {\n            vec3 darkened = liquidColor.xyz * (glassColor.xyz * 2.0);\n            vec3 _797 = mix(liquidColor.xyz, darkened, vec3(glassColor.w));\n            finalColor.x = _797.x;\n            finalColor.y = _797.y;\n            finalColor.z = _797.z;\n        }\n        else\n        {\n            vec3 invLiquid = vec3(1.0) - liquidColor.xyz;\n            vec3 invGlass = vec3(1.0) - glassColor.xyz;\n            vec3 screened = vec3(1.0) - (invLiquid * invGlass);\n            vec3 _825 = mix(liquidColor.xyz, screened, vec3(glassColor.w));\n            finalColor.x = _825.x;\n            finalColor.y = _825.y;\n            finalColor.z = _825.z;\n        }\n        finalColor.w = liquidColor.w;\n    }\n    return finalColor;\n}\n\nvec4 FLT_flutter_local_renderLiquidGlass(vec2 screenUV, vec2 p, vec2 uSize_1, float sd, float thickness, float refractiveIndex, float chromaticAberration, vec4 glassColor, float lightAngle, float lightIntensity, float ambientStrength, shader backgroundTexture, vec3 normal, float foregroundAlpha, float gaussianBlur)\n{\n    if (foregroundAlpha < 0.001000000047497451305389404296875)\n    {\n        return backgroundTexture.eval(backgroundTexture_size * ( screenUV));\n    }\n    if (thickness < 0.00999999977648258209228515625)\n    {\n        return backgroundTexture.eval(backgroundTexture_size * ( screenUV));\n    }\n    float param = sd;\n    float param_1 = thickness;\n    float height = FLT_flutter_local_getHeight(param, param_1);\n    vec2 param_2 = screenUV;\n    vec3 param_3 = normal;\n    float param_4 = height;\n    float param_5 = thickness;\n    float param_6 = refractiveIndex;\n    float param_7 = chromaticAberration;\n    vec2 param_8 = uSize_1;\n    float param_9 = gaussianBlur;\n    vec2 param_10;\n    vec4 _879 = FLT_flutter_local_calculateRefraction(param_2, param_3, param_4, param_5, param_6, param_7, param_8, backgroundTexture, param_9, param_10);\n    vec2 refractionDisplacement = param_10;\n    vec4 refractColor = _879;\n    vec4 liquidColor = refractColor;\n    vec2 param_11 = screenUV;\n    vec3 param_12 = normal;\n    float param_13 = height;\n    vec2 param_14 = refractionDisplacement;\n    float param_15 = thickness;\n    float param_16 = lightAngle;\n    float param_17 = lightIntensity;\n    float param_18 = ambientStrength;\n    vec3 lighting = FLT_flutter_local_calculateLighting(param_11, param_12, param_13, param_14, param_15, param_16, param_17, param_18);\n    vec4 param_19 = liquidColor;\n    vec4 param_20 = glassColor;\n    vec4 finalColor = FLT_flutter_local_applyGlassColor(param_19, param_20);\n    vec4 _908 = finalColor;\n    vec3 _910 = _908.xyz + lighting;\n    finalColor.x = _910.x;\n    finalColor.y = _910.y;\n    finalColor.z = _910.z;\n    vec4 backgroundColor = backgroundTexture.eval(backgroundTexture_size * ( screenUV));\n    return mix(backgroundColor, finalColor, vec4(foregroundAlpha));\n}\n\nvoid FLT_main()\n{\n    uSize = vec2(uSizeW, uSizeH);\n    uForegroundSize = vec2(uForegroundSizeW, uForegroundSizeH);\n    uGlassColor = vec4(uGlassColorR, uGlassColorG, uGlassColorB, uGlassColorA);\n    uOffset = vec2(uOffsetX, uOffsetY);\n    vec2 screenUV_1 = FLT_flutter_local_FlutterFragCoord() / uSize;\n    vec2 layerLocalCoord = FLT_flutter_local_FlutterFragCoord() - uOffset;\n    vec2 layerUV = layerLocalCoord / uForegroundSize;\n    bool _1125 = layerUV.x < 0.0;\n    bool _1132;\n    if (!_1125)\n    {\n        _1132 = layerUV.x > 1.0;\n    }\n    else\n    {\n        _1132 = _1125;\n    }\n    bool _1139;\n    if (!_1132)\n    {\n        _1139 = layerUV.y < 0.0;\n    }\n    else\n    {\n        _1139 = _1132;\n    }\n    bool _1146;\n    if (!_1139)\n    {\n        _1146 = layerUV.y > 1.0;\n    }\n    else\n    {\n        _1146 = _1139;\n    }\n    if (_1146)\n    {\n        fragColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( screenUV_1));\n        return;\n    }\n    vec4 foregroundColor = uForegroundTexture.eval(uForegroundTexture_size * ( layerUV));\n    if (foregroundColor.w < 0.001000000047497451305389404296875)\n    {\n        fragColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( screenUV_1));\n        return;\n    }\n    vec4 blurred = uForegroundBlurredTexture.eval(uForegroundBlurredTexture_size * ( layerUV));\n    float param_21 = blurred.w;\n    float param_22 = uThickness;\n    float sd_1 = FLT_flutter_local_approximateSDF(param_21, param_22);\n    vec2 param_23 = layerLocalCoord;\n    float param_24 = uThickness;\n    vec3 normal_1 = FLT_flutter_local_getNormal(param_23, param_24);\n    vec2 param_25 = screenUV_1;\n    vec2 param_26 = FLT_flutter_local_FlutterFragCoord();\n    vec2 param_27 = uSize;\n    float param_28 = sd_1;\n    float param_29 = uThickness;\n    float param_30 = uRefractiveIndex;\n    float param_31 = uChromaticAberration;\n    vec4 param_32 = uGlassColor;\n    float param_33 = uLightAngle;\n    float param_34 = uLightIntensity;\n    float param_35 = uAmbientStrength;\n    vec3 param_36 = normal_1;\n    float param_37 = foregroundColor.w;\n    float param_38 = uGaussianBlur;\n    fragColor = FLT_flutter_local_renderLiquidGlass(param_25, param_26, param_27, param_28, param_29, param_30, param_31, param_32, param_33, param_34, param_35, uBackgroundTexture, param_36, param_37, param_38);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "uSizeW",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 0,
        "name": "uBackgroundTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uSizeH",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 1,
        "name": "uForegroundTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "uForegroundSizeW",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 2,
        "name": "uForegroundBlurredTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "uForegroundSizeH",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "uChromaticAberration",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "uGlassColorR",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "uGlassColorG",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 7,
        "name": "uGlassColorB",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 8,
        "name": "uGlassColorA",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 9,
        "name": "uLightAngle",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 10,
        "name": "uLightIntensity",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 11,
        "name": "uAmbientStrength",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 12,
        "name": "uThickness",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 13,
        "name": "uRefractiveIndex",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 14,
        "name": "uOffsetX",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 15,
        "name": "uOffsetY",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 16,
        "name": "uNormalMethod",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 17,
        "name": "uGaussianBlur",
        "rows": 1,
        "type": 10
      }
    ]
  }
}